ВВЕДЕНИЕ
	Изображения в общем случае могут занимать большие объёмы данных – сравнимые или большие, чем размеры оперативной памяти, которые имеют ЭВМ (не говоря уже о том, что размеры оперативной памяти для разных ЭВМ сильно варьируются). Для больших изображений остро встаёт вопрос экономии оперативной памяти при их работе.
	Одним из способов экономии оперативной памяти при обработке изображений является поблочная обработка изображения – изображение режется на прямоугольные блоки (тайлы) и эти блоки обрабатываются ПОСЛЕДОВАТЕЛЬНО как отдельные изображения; после обработки всех блоков (или параллельно с обработкой) результаты объединяются вместе в результирующее изображение. Именно последовательность обработки отдельных тайлов данных обеспечивает экономию оперативной памяти. Размеры тайлов выбираются исходя из здравого смысла и минимальных требований к программе.
	Не все алгоритмы обработки изображений поддерживают поблочную обработку.

ЗАДАНИЕ
	Написать консольное приложение на языке программирования C++, повторяющее функционал предыдущего приложения со следующими модификациями:
1. Приложение должно выполнять многопоточную поблочную обработку изображения, деля результирующее изображение на квадратные тайлы (см. описание алгоритма в примечаниях); параметры обработки:
       а) размер тайла задаётся пользователем при запуске программы; размеры правых и нижних тайлов вычисляются по остаточному принципу;
       б) число потоков должно быть равно числу ядер процессора (см. std::thread::hardware_concurrency);
       в) приложение должно выводить в консоль потайловый прогресс обработки изображения;
2. Приложение должно замерять, помимо времени многопоточного поворота изображения, время чтения данных растра в оперативную память из файла исходного изображения и время записи данных из оперативной памяти 
 
РЕЗУЛЬТАТ ВЫПОЛНЕНИЯ ЗАДАНИЯ
	Задание считается выполненным при выполнении следующих условий:
1. Программа выполняет поставленные перед ней задачи - выполняет поворот изображения, сохраняет повёрнутые изображения и выводит время поворота;
2. Разработчиком представлены исходные коды проекта;
3. Результирующие изображения, созданные программой должны совпадать с результирующими изображениями, созданными программой из предыдущего задания с теми же входными параметрами.
	При увеличении размера тайла расходы оперативной памяти должны увеличиваться, однако время обработки может и уменьшаться (за счёт уменьшения накладных расходов)
	При увеличении количества потоков до количества ядер процессора приложение должно ускоряться приблизительно пропорционально увеличению потоков. При количестве потоков большем, чем количество ядер процессора приложение не должно работать быстрее (и может даже работать медленнее за счёт неэффективного использования кэша процессора).

ПРИМЕЧАНИЯ
1. Дополнительный материал можно узнать в лабораторной работе № 4 методички 3677.
2. Основные этапы работы алгоритма приложения должны выполняться следующим образом и в указанном порядке:
	а) Чтение заголовка исходного изображения (без растра);
	б) Вычисление положения всех тайлов результирующего изображения по размерам исходного изображения, углу поворота и размеру тайла;
	в) Сохранение в файл результирующего изображение заголовка;
	г) Проход в цикле по всем тайлам результирующего изображения:
		1) Определение положения тайла исходного изображения по 4-м угловым пикселям соответствующего тайла результирующего изображения (путём проецирования пикселей матрицей аффинного преобразования);
		2) Загрузка в оперативную память пикселей тайла исходного изображения с замерами времени чтения;
		3) Запуск процедуры многопоточного поворота с замерами времени обработки для тайла результирующего изображения;
		4) Ожидание завершения обработки с отображением прогресса;
		5) Сохранение результирующих данных в файл результирующего изображения с замерами времени записи;
	д) Вывод времени чтения данных в оперативную память, времени поворота изображения и времени записи данных в файл как суммы соответствующих времён по всем тайлам.
3. Краткий курс по многопоточному программированию в C++: https://www.youtube.com/playlist?list=PLQOaTSbfxUtAc_RpyDiWCHq0YTzLtVSD0 
