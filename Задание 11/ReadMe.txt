ВВЕДЕНИЕ
	Обработка изображений в общем случае может занимать много времени из-за больших размеров растра и/или сложных алгоритмов.
	Одним из способов ускорения алгоритмов является распараллеливание его работы – независимая обработка частей изображения разными потоками процесса программы.
	Большое число алгоритмов яркостного и геометрического преобразования изображения представляют собой алгоритмы попиксельной обработки данных, при которых пиксели результирующего изображения вычисляются независимо друг от друга, что позволяет обрабатывать каждый пиксель в отдельном потоке независимо от других пикселей.
	Однако многопоточная работа алгоритма имеет недостатки:
1. Не всегда можно реализовать многопоточную обработку с эффективной нагрузкой на кэш процессора;
2. Процедуры создания, удаления и синхронизации работы потоков занимают время, что может быть критично для быстродействия программы;
3. Скорость работы многопоточной программы не всегда увеличивается при увеличении числа потоков.
	Для минимизации недостатков многопоточной реализации алгоритмов используются следующие способы оптимизации программы:
1. Для максимально эффективной нагрузки на кэш, данные, обрабатываемые потоками должны находиться как можно ближе друг к другу в памяти, чтобы влезать в кэш-линию;
2. Объёмы данных, обрабатываемых одним потоком, выбираются таким образом, чтобы время их обработки было много больше времени создания, удаления и синхронизации работы потоков;
3. Максимальное число одновременно работающих потоков, обрабатывающих данные, ограничено количеством физических ядер процессора – если число потоков превышает число ядер, то при обработке в конкретный момент времени физически работают столько потоков, каково число ядер процессора; следовательно, не смысла создавать больше потоков (исключение, когда увеличение числа потоков может привести к увеличению производительности - Hyper-threading; но в этом случае не гарантируется увеличение производительности пропорционально увеличению потоков).
	Не все алгоритмы обработки изображений поддерживают распараллеливание или позволяют использовать его эффективно.

ЗАДАНИЕ
	Модифицировать приложение из предыдущего задания следующим образом:
1. Полностью удалить функции, связанные с поворотом изображения с интерполяцией по ближайшему соседу;
2. Сделать поворот изображения в многопоточном режиме – поток с номером i (i = 0 .. n-1) обрабатывает каждый n-й пиксель результирующего изображения, начиная с i-го пикселя, где n - число потоков; n задаётся пользователем при запуске программы. 

РЕЗУЛЬТАТ ВЫПОЛНЕНИЯ ЗАДАНИЯ
	Задание считается выполненным при выполнении следующих условий:
1. Программа выполняет поставленные перед ней задачи - выполняет поворот изображения, сохраняет повёрнутые изображения и выводит время поворота;
2. Разработчиком представлены исходные коды проекта;
3. Результирующие изображения, созданные программой должны совпадать с результирующими изображениями, созданными программой из предыдущего задания с теми же входными параметрами.
	При увеличении количества потоков до количества ядер процессора приложение должно ускоряться приблизительно пропорционально увеличению потоков. При количестве потоков большем, чем количество ядер процессора приложение не должно работать быстрее (и может даже работать медленнее за счёт неэффективного использования кэша процессора).

ПРИМЕЧАНИЯ
1. Дополнительный материал можно узнать в лабораторной работе № 4 методички 3677.
2. Основные этапы работы алгоритма приложения должны выполняться следующим образом и в указанном порядке:
	а) Загрузка всего растра исходного изображения в оперативную память;
	б) Выделение памяти в оперативной памяти под растр результирующего изображения;
	в) Запуск процедуры поворота с замерами времени; запуск выполняется главным потоком приложения (это поток, в котором выполняется функция main) следующим образом:
		1) Главный поток создаёт и запускает n потоков std::thread, отправляя на вход потокам его номер;
		2) Каждый созданный поток, зная свой номер, выполняет последовательно обработку своих пикселей результирующего изображения; указатели на растры изображений, матрицу преобразования и дополнительные данные из заголовка изображения можно передавать как параметры в конструкторе объекта std::thread, так и представить в виде глобальных переменных (выбор схемы передачи параметров в потоки остаётся на выбор разработчика);
		3) Главный поток ждёт завершения работы созданных потоков и после завершения их работы выводит время обработки (по сути, время работы потоков);
	г) Сохранение результирующего изображения.
3. Краткий курс по многопоточному программированию в C++: https://www.youtube.com/playlist?list=PLQOaTSbfxUtAc_RpyDiWCHq0YTzLtVSD0 
4. Дополнительное задание (желательное, но необязательное): при многопоточной обработке изображения главный поток должен выводит прогресс обработки в консоль – созданные потоки должны сообщать главному потоку информацию о количестве обработанных элементов (через атомарную переменную или с использованием std::condition_variable), а главный поток в цикле ожидания выводит эти данные с консоль как количество или процент обработанных пикселей; прогресс должен выводится в одну и ту же строку консоли путём перезаписывания предыдущих данных с помощью символа возврата каретки ‘\r’.

